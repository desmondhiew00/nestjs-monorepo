import { CreateFindManyResultType } from '@app/prisma';
import { FindMany<%= pascalCase(modelName) %>Args, FindUnique<%= pascalCase(modelName) %>Args, <%= pascalCase(modelName) %> } from '<%= gqlImportSrc %>';
import { Args, Info, <% if (withCrud) { %>Mutation, <% } %>Query, Resolver } from '@nestjs/graphql';
import { GraphQLResolveInfo } from 'graphql';
import { <%= pascalCase(modelName) %>Service } from './<%= modelName %>.service';
<% if (withCrud) { %>
import { Create<%= pascalCase(modelName) %>Input, Update<%= pascalCase(modelName) %>Input } from "./<%= modelName %>.dto";
import { AuthData, UseAuthUser, UseJwtAuthGuard } from "../auth";
<% } %>
<% if (withAuth && !withCrud) { %>
import { UseJwtAuthGuard } from '../auth';
<% } %>

const <%= pascalCase(modelName) %>ManyResult = CreateFindManyResultType(<%= pascalCase(modelName) %>);

<% if (withAuth) { %>
@UseJwtAuthGuard()
<% } %>
@Resolver(<%= pascalCase(modelName) %>)
export class <%= pascalCase(modelName) %>Resolver {
  constructor(private <%= camelCase(modelName) %>Service: <%= pascalCase(modelName) %>Service) {}

  @Query(() => <%= pascalCase(modelName) %>ManyResult)
  async <%= plural(modelName) %>(@Args() args: FindMany<%= pascalCase(modelName) %>Args, @Info() info: GraphQLResolveInfo) {
    return this.<%= camelCase(modelName) %>Service.<%= plural(modelName) %>(args, info);
  }

  @Query(() => <%= pascalCase(modelName) %>, { nullable: true })
  async <%= singular(modelName) %>(@Args() args: FindUnique<%= pascalCase(modelName) %>Args, @Info() info: GraphQLResolveInfo) {
    return this.<%= camelCase(modelName) %>Service.<%= singular(modelName) %>(args, info);
  }
<% if (withCrud) { %>
  @Mutation(() => <%= pascalCase(modelName) %>)
  async create<%= pascalCase(modelName) %>(
    @Args("input") input: Create<%= pascalCase(modelName) %>Input,
    @Info() info: GraphQLResolveInfo,
    @UseAuthUser() authData: AuthData,
  ) {
    return this.<%= camelCase(modelName) %>Service.create<%= pascalCase(modelName) %>(input, authData, info);
  }

  @Mutation(() => <%= pascalCase(modelName) %>)
  async update<%= pascalCase(modelName) %>(
    @Args("id") id: number,
    @Args("input") input: Update<%= pascalCase(modelName) %>Input,
    @Info() info: GraphQLResolveInfo,
    @UseAuthUser() authData: AuthData,
  ) {
    return this.<%= camelCase(modelName) %>Service.update<%= pascalCase(modelName) %>(id, input, authData, info);
  }

  @Mutation(() => Boolean)
  async delete<%= pascalCase(modelName) %>(@Args("id") id: number, @UseAuthUser() authData: AuthData) {
    await this.<%= camelCase(modelName) %>Service.delete<%= pascalCase(modelName) %>(id, authData);
    return true;
  }
<% } %>
}

